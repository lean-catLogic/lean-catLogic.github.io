"use strict";(self.webpackChunklean_catlogic=self.webpackChunklean_catlogic||[]).push([[593],{3905:(e,n,t)=>{t.d(n,{Zo:()=>o,kt:()=>y});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},o=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},_="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,c=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),_=s(t),d=i,y=_["".concat(c,".").concat(d)]||_[d]||m[d]||l;return t?a.createElement(y,r(r({ref:n},o),{},{components:t})):a.createElement(y,r({ref:n},o))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=d;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p[_]="string"==typeof e?e:i,r[1]=p;for(var s=2;s<l;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},777:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>_,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=t(7462),i=(t(7294),t(3905));const l={},r="Semantics of PPC",p={unversionedId:"semantics/examples/PPC",id:"semantics/examples/PPC",title:"Semantics of PPC",description:"Syntactic Poset",source:"@site/docs/semantics/examples/PPC.md",sourceDirName:"semantics/examples",slug:"/semantics/examples/PPC",permalink:"/docs/semantics/examples/PPC",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Constructions on Syntactic Categories",permalink:"/docs/semantics/synCat_structure"},next:{title:"Semantics of Monadic PPC",permalink:"/docs/semantics/examples/MPPC"}},c={},s=[{value:"Syntactic Poset",id:"syntactic-poset",level:2},{value:"Definition",id:"definition",level:3},{value:"<code>and_eq</code>",id:"and_eq",level:3},{value:"<code>impl_eq</code>",id:"impl_eq",level:3},{value:"Syntactic Category",id:"syntactic-category",level:2},{value:"Lifting tactic",id:"lifting-tactic",level:3},{value:"Finite-product category",id:"finite-product-category",level:3},{value:"Cartesian closed category",id:"cartesian-closed-category",level:3}],o={toc:s};function _(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"semantics-of-ppc"},"Semantics of PPC"),(0,i.kt)("h2",{id:"syntactic-poset"},"Syntactic Poset"),(0,i.kt)("h3",{id:"definition"},"Definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="semantics/PPC_poset.lean"',title:'"semantics/PPC_poset.lean"'},"def PPC_eq := @Form_eq PPC_Form PPC_Der\n")),(0,i.kt)("h3",{id:"and_eq"},(0,i.kt)("inlineCode",{parentName:"h3"},"and_eq")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="semantics/PPC_poset.lean"',title:'"semantics/PPC_poset.lean"'},"def and_eq : PPC_eq \u2192 PPC_eq \u2192 PPC_eq :=\n  quot.lift\u2082 (\u03bb \u03c6 \u03c8, \u2983\u03c6 & \u03c8\u2984) and_liftable1 and_liftable2 \n\nnotation (name := and_eq) X `&\u207c` Y := and_eq X Y\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="semantics/PPC_poset.lean"',title:'"semantics/PPC_poset.lean"'},"lemma and_liftable1 : \u2200 \u03c6 \u03c8 \u03c8' : PPC_Form, \n      (\u03c8 \u22a3\u22a2 \u03c8') \u2192 \u2983\u03c6 & \u03c8\u2984 = \u2983\u03c6 & \u03c8'\u2984 :=\n  begin\n    assume \u03c6 \u03c8 \u03c8' h,\n    apply quotient.sound,\n    cases h with \u03c8\u03c8' \u03c8'\u03c8,\n    constructor,\n    -- Proof that \u03c6&\u03c8 \u22a2 \u03c6&\u03c8'\n      apply and_intro,\n      -- \u03c6&\u03c8 \u22a2 \u03c6\n      apply and_eliml,\n      apply derive_refl, -- \u03c6&\u03c8 \u22a2 \u03c6&\u03c8\n      -- \u03c6&\u03c8 \u22a2 \u03c8'\n      apply derive_trans,\n      apply and_elimr,\n      apply derive_refl, -- \u03c6&\u03c8 \u22a2 \u03c6&\u03c8\n      exact \u03c8\u03c8',\n    -- Proof that \u03c6&\u03c8' \u22a2 \u03c6&\u03c8\n      apply and_intro,\n      -- \u03c6&\u03c8 \u22a2 \u03c6\n      apply and_eliml,\n      apply derive_refl, -- \u03c6&\u03c8' \u22a2 \u03c6&\u03c8'\n      -- \u03c6&\u03c8' \u22a2 \u03c8\n      apply derive_trans,\n      apply and_elimr,\n      apply derive_refl, -- \u03c6&\u03c8' \u22a2 \u03c6&\u03c8'\n      exact \u03c8'\u03c8,\n  end\n\nlemma and_liftable2 : \u2200 \u03c6 \u03c6' \u03c8 : PPC_Form, \n      (\u03c6 \u22a3\u22a2 \u03c6') \u2192 \u2983\u03c6 & \u03c8\u2984 = \u2983\u03c6' & \u03c8\u2984 := \n  begin\n    assume \u03c6 \u03c6' \u03c8 h,\n    apply quotient.sound,\n    cases h with \u03c6\u03c6' \u03c6'\u03c6,\n    constructor,\n    -- Proof that \u03c6&\u03c8 \u22a2 \u03c6'&\u03c8\n      apply and_intro,\n      apply derive_trans,\n      apply and_eliml,\n      apply derive_refl, -- \u03c6&\u03c8 \u22a2 \u03c6&\u03c8\n      exact \u03c6\u03c6',\n      apply and_elimr,\n      apply derive_refl, -- \u03c6&\u03c8 \u22a2 \u03c6&\u03c8\n    -- Proof that \u03c6'&\u03c8 \u22a2 \u03c6&\u03c8\n      apply and_intro,\n      apply derive_trans,\n      apply and_eliml,\n      apply derive_refl, -- \u03c6'&\u03c8 \u22a2 \u03c6'&\u03c8\n      exact \u03c6'\u03c6,\n      apply and_elimr,\n      apply derive_refl, -- \u03c6'&\u03c8 \u22a2 \u03c6'&\u03c8\n  end\n")),(0,i.kt)("h3",{id:"impl_eq"},(0,i.kt)("inlineCode",{parentName:"h3"},"impl_eq")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="semantics/PPC_poset.lean"',title:'"semantics/PPC_poset.lean"'},"def impl_eq : PPC_eq \u2192 PPC_eq \u2192 PPC_eq :=\n  quot.lift\u2082 (\u03bb \u03c6 \u03c8, \u2983\u03c6 \u2283 \u03c8\u2984) impl_liftable1 impl_liftable2 \n\nnotation (name := impl_eq) X `\u2283\u207c` Y := impl_eq X Y\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="semantics/PPC_poset.lean"',title:'"semantics/PPC_poset.lean"'},"lemma impl_liftable1 : \u2200 \u03c6 \u03c8 \u03c8' : PPC_Form, \n      (\u03c8 \u22a3\u22a2 \u03c8') \u2192 \u2983\u03c6 \u2283 \u03c8\u2984 = \u2983\u03c6 \u2283 \u03c8'\u2984 :=\n  begin \n    assume \u03c6 \u03c8 \u03c8' h,\n    apply quotient.sound,\n    cases h with \u03c8\u03c8' \u03c8'\u03c8,\n    constructor,\n      apply impl_intro,\n      apply PPC_derives_x.trans_hyp,\n      rw PPC_Hyp_x.insert_is_union_singleton,\n      apply PPC_derives_x.modus_ponens,\n      exact \u03c8\u03c8',\n      apply impl_intro,\n      apply PPC_derives_x.trans_hyp,\n      rw PPC_Hyp_x.insert_is_union_singleton,\n      apply PPC_derives_x.modus_ponens,\n      exact \u03c8'\u03c8,\n  end \n\nlemma impl_liftable2 : \u2200 \u03c6 \u03c6' \u03c8 : PPC_Form, \n      (\u03c6 \u22a3\u22a2 \u03c6') \u2192 \u2983\u03c6 \u2283 \u03c8\u2984 = \u2983\u03c6' \u2283 \u03c8\u2984 := \n  begin \n    assume \u03c6 \u03c6' \u03c8 h,\n    apply quotient.sound,\n    cases h with \u03c6\u03c6' \u03c6'\u03c6,\n    constructor,\n      apply impl_elim,\n      apply PPC_derives_x.hypo_syll',\n      apply impl_intro,\n      apply weak,\n      exact \u03c6'\u03c6,\n      ---\n      apply impl_elim,\n      apply PPC_derives_x.hypo_syll',\n      apply impl_intro,\n      apply weak,\n      exact \u03c6\u03c6',\n  end \n")),(0,i.kt)("h2",{id:"syntactic-category"},"Syntactic Category"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="semantics/PPC_syntacticCat.lean"',title:'"semantics/PPC_syntacticCat.lean"'},"instance \u2102_PPC : thin_cat PPC_eq := syn_cat\n")),(0,i.kt)("h3",{id:"lifting-tactic"},"Lifting tactic"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="semantics/PPC_syntacticCat.lean"',title:'"semantics/PPC_syntacticCat.lean"'},"namespace \u2102_PPC_tactics\n\ndef Form : Type := PPC_Form\ndef Der : has_derives Form := PPC_Der\n\nmeta def lift_derive_\u2102_PPC : tactic unit \u2192 tactic unit :=\n  @synCat_tactics.lift_derive_syn_cat Form Der\n\nend \u2102_PPC_tactics\n")),(0,i.kt)("h3",{id:"finite-product-category"},"Finite-product category"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="categoryTheory/thin.lean"',title:'"categoryTheory/thin.lean"'},"class thin_cat (C : Type) extends category C :=\n  (K : \u2200 (X Y : C) (f g : X \u27f6 Y), f = g)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="semantics/PPC_syntacticCat.lean"',title:'"semantics/PPC_syntacticCat.lean"'},"instance : FP_cat PPC_eq :=\n{\n  unit := syn_obj PPC_Form.top,\n  term := by lift_derive_\u2102_PPC `[ apply truth ], -- \u03c6 \u22a2 \u22a4\n  unit_\u03b7 := \u03bb X f, by apply thin_cat.K,\n  prod := (&\u207c),\n  pr1 := by lift_derive_\u2102_PPC `[ apply and_eliml ], -- \u03c6 & \u03c8 \u22a2 \u03c6\n  pr2 := by lift_derive_\u2102_PPC `[ apply and_elimr ], -- \u03c6 & \u03c8 \u22a2 \u03c8\n                -- If \u03b8 \u22a2 \u03c6 and \u03b8 \u22a2 \u03c8, then \u03b8 \u22a2 \u03c6 & \u03c8\n  pair := by lift_derive_\u2102_PPC `[ apply and_intro ],\n  prod_\u03b21 := \u03bb X Y Z f g, by apply thin_cat.K,\n  prod_\u03b22 := \u03bb X Y Z f g, by apply thin_cat.K,\n  prod_\u03b7 :=  \u03bb X Y, by apply thin_cat.K,\n}\n")),(0,i.kt)("h3",{id:"cartesian-closed-category"},"Cartesian closed category"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="semantics/PPC_syntacticCat.lean"',title:'"semantics/PPC_syntacticCat.lean"'},"instance : CC_cat PPC_eq := \n{\n  exp := (\u2283\u207c),\n  eval := by lift_derive_\u2102_PPC `[ \n                -- \u03c6\u2283\u03c8 & \u03c6 \u22a2 \u03c8\n                apply PPC_derives_x.union_Hyp_and,\n                apply PPC_derives_x.modus_ponens ],\n  curry := by lift_derive_\u2102_PPC `[ \n                -- If \u03c6 & \u03c8 \u22a2 \u03b8, then \u03c6 \u22a2 \u03c8 \u2283 \u03b8\n                apply impl_intro,\n                apply PPC_derives_x.and_Hyp_union ],\n  curry_\u03b2 := \u03bb {X Y Z} u, by apply thin_cat.K,\n  curry_\u03b7 := \u03bb {X Y Z} v, by apply thin_cat.K,\n}\n")))}_.isMDXComponent=!0}}]);