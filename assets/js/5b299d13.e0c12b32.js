"use strict";(self.webpackChunklean_catlogic=self.webpackChunklean_catlogic||[]).push([[8],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),o=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=o(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=o(n),g=r,d=u["".concat(c,".").concat(g)]||u[g]||p[g]||i;return n?a.createElement(d,l(l({ref:t},m),{},{components:n})):a.createElement(d,l({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4712:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const i={},l="General-Purpose Tactics",s={unversionedId:"generalTactics",id:"generalTactics",title:"General-Purpose Tactics",description:"Print-debugging",source:"@site/docs/generalTactics.md",sourceDirName:".",slug:"/generalTactics",permalink:"/docs/generalTactics",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PPC + Monadic Modality",permalink:"/docs/deduction/examples/MPPC"},next:{title:"Syntactic Posets",permalink:"/docs/semantics/synPoset"}},c={},o=[{value:"Print-debugging",id:"print-debugging",level:2},{value:"untilNthEmptyLine",id:"untilnthemptyline",level:3},{value:"Trace Goal",id:"trace-goal",level:3},{value:"Count Goals",id:"count-goals",level:2},{value:"Repeat-Assume Tactics",id:"repeat-assume-tactics",level:2},{value:"Name generation",id:"name-generation",level:3},{value:"repeat-assume",id:"repeat-assume",level:3},{value:"repeat-assume-pair (helper tactic)",id:"repeat-assume-pair-helper-tactic",level:3},{value:"repeat-assume-then-induct",id:"repeat-assume-then-induct",level:3},{value:"repeat-assume-replace",id:"repeat-assume-replace",level:3}],m={toc:o};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"general-purpose-tactics"},"General-Purpose Tactics"),(0,r.kt)("h2",{id:"print-debugging"},"Print-debugging"),(0,r.kt)("h3",{id:"untilnthemptyline"},"untilNthEmptyLine"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="generalTactics.lean"',title:'"generalTactics.lean"'},'def NEWLINE : char := char.of_nat 10\n\ndef untilNthEmptyLine_core : option nat \u2192 list string \u2192 string\n| _ [] := ""\n| (some num) (""::rest) := if num=0 then "" else \n     "\\n" ++ untilNthEmptyLine_core (some(num-1)) rest\n| none (line::rest) :=\n    line ++ "\\n" ++ untilNthEmptyLine_core none rest\n| (some num) (line::rest) :=  if num=0 then "" else \n    line ++ "\\n" ++ untilNthEmptyLine_core (some num) rest \n\ndef untilNthEmptyLine (onum : option nat) (s : string) : string :=\n  untilNthEmptyLine_core onum $ list.drop 1 $ s.split_on NEWLINE\n')),(0,r.kt)("h3",{id:"trace-goal"},"Trace Goal"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="generalTactics.lean"',title:'"generalTactics.lean"'},'meta def trace_goal_core (o : option nat) (iden : string) : tactic unit :=\n  trace ("\\n-- " ++ iden ++ " --") >>\n  tactic.read >>= trace \u2218 (untilNthEmptyLine o) \u2218 format.to_string \u2218 to_fmt\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="generalTactics.lean"',title:'"generalTactics.lean"'},"meta def trace_goal : string \u2192 tactic unit :=\n  trace_goal_core (some 1) \nmeta def trace_goals (num : nat) : string \u2192 tactic unit :=\n  trace_goal_core (some num) \nmeta def trace_all_goals : string \u2192 tactic unit :=\n  trace_goal_core none\n")),(0,r.kt)("h2",{id:"count-goals"},"Count Goals"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="generalTactics.lean"',title:'"generalTactics.lean"'},"meta def count_goals : tactic nat :=\n  tactic.get_goals >>= (return \u2218 list.length)\n")),(0,r.kt)("h2",{id:"repeat-assume-tactics"},"Repeat-Assume Tactics"),(0,r.kt)("h3",{id:"name-generation"},"Name generation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="generalTactics.lean"',title:'"generalTactics.lean"'},"def varFormat (baseName : name) (i : nat) : name :=\n  name.append_suffix baseName (nat.has_repr.repr i)\ndef gen_nameList (baseName : name) (n : nat) : list name := \n  list.map (varFormat baseName) (list.range n)\n")),(0,r.kt)("h3",{id:"repeat-assume"},"repeat-assume"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="generalTactics.lean"',title:'"generalTactics.lean"'},"meta def repeat_assume : list name \u2192 tactic unit :=\n  list.foldr (\u03bb nm rest, intro nm >> rest) skip\n")),(0,r.kt)("h3",{id:"repeat-assume-pair-helper-tactic"},"repeat-assume-pair (helper tactic)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="generalTactics.lean"',title:'"generalTactics.lean"'},"meta def repeat_assume_pair : list name \u2192 tactic (list (name \xd7 expr))\n| [] := return []\n| (nm::nms) :=\n  (do\n    temp_nm \u2190 mk_fresh_name,\n    e \u2190 intro temp_nm,\n    rest \u2190 repeat_assume_pair nms,\n    return $ (nm,e)::rest)\n")),(0,r.kt)("h3",{id:"repeat-assume-then-induct"},"repeat-assume-then-induct"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="generalTactics.lean"',title:'"generalTactics.lean"'},"meta def repeat_assume_then_induct (T : tactic unit) (N : list name) : tactic unit :=\n  do\n    assumptionList \u2190 repeat_assume_pair N,\n    T,\n    let cmb := \u03bb nm e (res : tactic unit), (induction e [nm]) >> res,\n    list.foldr (function.uncurry cmb) skip assumptionList\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="generalTactics.lean"',title:'"generalTactics.lean"'},"meta def repeat_assume_induct : list name \u2192  tactic unit :=\n  repeat_assume_then_induct skip\n")),(0,r.kt)("h3",{id:"repeat-assume-replace"},"repeat-assume-replace"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="generalTactics.lean"',title:'"generalTactics.lean"'},"meta def repeat_assume_replace (F : parse ident) (N : list name) : tactic unit :=\ndo\n  f \u2190 resolve_name F,\n  assumptionList \u2190 repeat_assume_pair N,\n  let cmb := \u03bb (nm : name) (e : expr) (res:tactic unit),\n    (do\n      \xabhave\xbb nm none ``(%%f %%e),\n      clear e,\n      res),\n  list.foldr (function.uncurry cmb) skip assumptionList\n")))}u.isMDXComponent=!0}}]);