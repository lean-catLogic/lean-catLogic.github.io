"use strict";(self.webpackChunklean_catlogic=self.webpackChunklean_catlogic||[]).push([[270],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8760:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},o="The Deduction Typeclass",s={unversionedId:"deduction/deduction",id:"deduction/deduction",title:"The Deduction Typeclass",description:"Hypotheses",source:"@site/docs/deduction/deduction.md",sourceDirName:"deduction",slug:"/deduction/",permalink:"/docs/deduction/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Thin Categories",permalink:"/docs/categoryTheory/thin"},next:{title:"Cartesian Connectives",permalink:"/docs/deduction/deduction_cartesian"}},l={},c=[{value:"Hypotheses",id:"hypotheses",level:2},{value:"Singleton hypotheses",id:"singleton-hypotheses",level:3},{value:"Deduction",id:"deduction",level:2},{value:"<code>has_derives</code>",id:"has_derives",level:3},{value:"<code>has_struct_derives</code>",id:"has_struct_derives",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-deduction-typeclass"},"The Deduction Typeclass"),(0,r.kt)("h2",{id:"hypotheses"},"Hypotheses"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leanprover-community.github.io/mathlib_docs/init/core.html#has_emptyc"},(0,r.kt)("inlineCode",{parentName:"a"},"has_emptyc")," Documentation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="mathlib: init/core.lean"',title:'"mathlib:','init/core.lean"':!0},"class has_emptyc   (\u03b1 : Type u) := \n    (emptyc : \u03b1)\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leanprover-community.github.io/mathlib_docs/init/core.html#has_insert"},(0,r.kt)("inlineCode",{parentName:"a"},"has_insert")," Documentation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="mathlib: init/core.lean"',title:'"mathlib:','init/core.lean"':!0},"class has_insert   (\u03b1 : out_param (Type u)) (\u03b3 : Type v) := \n    (insert : \u03b1 \u2192 \u03b3 \u2192 \u03b3)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/deduction.lean"',title:'"deduction/deduction.lean"'},"class has_Hyp (Form : Type) :=\n  (Hyp : Type)\n  [emptyHyp : has_emptyc Hyp]\n  [insertHyp : has_insert Form Hyp]\n")),(0,r.kt)("h3",{id:"singleton-hypotheses"},"Singleton hypotheses"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leanprover-community.github.io/mathlib_docs/init/core.html#has_singleton"},(0,r.kt)("inlineCode",{parentName:"a"},"has_singleton")," Documentation")," | ",(0,r.kt)("a",{parentName:"p",href:"https://leanprover-community.github.io/mathlib_docs/init/core.html#is_lawful_singleton"},(0,r.kt)("inlineCode",{parentName:"a"},"is_lawful_singleton")," Documentation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="mathlib: init/core.lean"',title:'"mathlib:','init/core.lean"':!0},"class has_singleton (\u03b1 : out_param (Type u)) (\u03b2 : Type v) := \n  (singleton : \u03b1 \u2192 \u03b2)\nclass is_lawful_singleton (\u03b1 : Type u) (\u03b2 : Type v) [has_emptyc \u03b2] [has_insert \u03b1 \u03b2] [has_singleton \u03b1 \u03b2] : Prop :=\n  (insert_emptyc_eq : \u2200 (x : \u03b1), (insert x \u2205 : \u03b2) = {x})\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/deduction.lean"',title:'"deduction/deduction.lean"'},"instance singleHyp {Form : Type} [hasHyp : has_Hyp Form] : has_singleton Form hasHyp.Hyp := \n  {singleton := \u03bb \u03c6, hasHyp.insertHyp.insert \u03c6 hasHyp.emptyHyp.emptyc}\n  \ninstance lawfulSingleHyp {Form : Type} [hasHyp : has_Hyp Form] : \n  @is_lawful_singleton Form (has_Hyp.Hyp Form) hasHyp.emptyHyp hasHyp.insertHyp deduction_basic.singleHyp := \n  { insert_emptyc_eq := begin assume \u03c6, refl end }\n")),(0,r.kt)("h2",{id:"deduction"},"Deduction"),(0,r.kt)("h3",{id:"has_derives"},(0,r.kt)("inlineCode",{parentName:"h3"},"has_derives")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/deduction.lean"',title:'"deduction/deduction.lean"'},"class has_derives (Form : Type) extends has_Hyp Form := \n  (derives : Hyp \u2192 Form \u2192 Prop)\n  (derive_Trans : \u2200 {\u03a6 : Hyp} (\u03c8) {\u03b8 : Form}, derives \u03a6 \u03c8 \u2192 derives {\u03c8} \u03b8 \u2192 derives \u03a6 \u03b8)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/deduction.lean"',title:'"deduction/deduction.lean"'},"def der {Form : Type} [Der : has_derives Form] : Form \u2192 Form \u2192 Prop :=\n  \u03bb \u03c6 \u03c8, has_derives.derives {\u03c6} \u03c8\n\ninfix `\u22a2`:60 := der\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/deduction.lean"',title:'"deduction/deduction.lean"'},"lemma derive_trans {Form : Type} [Der : has_derives Form] : \n  \u2200 {\u03c6 : Form} (\u03c8) {\u03b8}, (\u03c6 \u22a2 \u03c8) \u2192 (\u03c8 \u22a2 \u03b8) \u2192 (\u03c6 \u22a2 \u03b8) :=\n  begin\n    assume \u03c6,\n    apply Der.derive_Trans,\n  end\n")),(0,r.kt)("h3",{id:"has_struct_derives"},(0,r.kt)("inlineCode",{parentName:"h3"},"has_struct_derives")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leanprover-community.github.io/mathlib_docs/init/core.html#has_mem"},(0,r.kt)("inlineCode",{parentName:"a"},"has_mem")," Documentation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="mathlib: init/core.lean"',title:'"mathlib:','init/core.lean"':!0},"class has_mem (\u03b1 : out_param (Type u)) (\u03b3 : Type v) := \n    (mem : \u03b1 \u2192 \u03b3 \u2192 Prop)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/deduction.lean"',title:'"deduction/deduction.lean"'},"class has_struct_derives (Form : Type) extends has_derives Form :=\n  [memHyp : has_mem Form Hyp]\n  (inInsert : \u2200 {\u03c6 : Form} {\u03a6 : Hyp}, \u03c6 \u2208 insert \u03c6 \u03a6)\n  (hyp : \u2200 {\u03a6} {\u03c6}, (\u03c6 \u2208 \u03a6) \u2192 derives \u03a6 \u03c6)\n  (weak1 : \u2200 {\u03a6} {\u03c6} (\u03c8), derives \u03a6 \u03c6 \u2192 derives (insert \u03c8 \u03a6) \u03c6)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/deduction.lean"',title:'"deduction/deduction.lean"'},"lemma derive_refl {Form : Type} [Der : has_struct_derives Form] :\n  \u2200 \u03c6 : Form, \u03c6 \u22a2 \u03c6 :=\n  begin\n    assume \u03c6,\n    apply Der.hyp,\n    apply Der.inInsert,\n  end\n")))}d.isMDXComponent=!0}}]);