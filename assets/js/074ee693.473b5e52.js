"use strict";(self.webpackChunklean_catlogic=self.webpackChunklean_catlogic||[]).push([[614],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>_});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function P(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,s=P(e,["components","mdxType","originalType","parentName"]),d=p(t),c=i,_=d["".concat(o,".").concat(c)]||d[c]||m[c]||l;return t?a.createElement(_,r(r({ref:n},s),{},{components:t})):a.createElement(_,r({ref:n},s))}));function _(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=c;var P={};for(var o in n)hasOwnProperty.call(n,o)&&(P[o]=n[o]);P.originalType=e,P[d]="string"==typeof e?e:i,r[1]=P;for(var p=2;p<l;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9897:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>P,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const l={},r="Positive Propositional Calculus",P={unversionedId:"deduction/PPC",id:"deduction/PPC",title:"Positive Propositional Calculus",description:"PPC Definition",source:"@site/docs/deduction/PPC.md",sourceDirName:"deduction",slug:"/deduction/PPC",permalink:"/docs/deduction/PPC",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The Deduction Typeclass",permalink:"/docs/deduction/"},next:{title:"Syntactic Posets",permalink:"/docs/semantics/synPoset/"}},o={},p=[{value:"PPC Definition",id:"ppc-definition",level:2},{value:"Formulas",id:"formulas",level:3},{value:"Sets of Hypotheses",id:"sets-of-hypotheses",level:3},{value:"<code>PPC_derives</code>",id:"ppc_derives",level:3},{value:"PPC is an instance of <code>has_derives</code>",id:"ppc-is-an-instance-of-has_derives",level:2},{value:"A few lemmas",id:"a-few-lemmas",level:3},{value:"Instance declaration",id:"instance-declaration",level:3},{value:"Lemmas about PPC deduction",id:"lemmas-about-ppc-deduction",level:2},{value:"Lemmas about Hyp",id:"lemmas-about-hyp",level:3},{value:"Lemmas about <code>PPC_derives</code>",id:"lemmas-about-ppc_derives",level:3}],s={toc:p};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"positive-propositional-calculus"},"Positive Propositional Calculus"),(0,i.kt)("h2",{id:"ppc-definition"},"PPC Definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"namespace PPC_defn\n")),(0,i.kt)("h3",{id:"formulas"},"Formulas"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"inductive PPC_form : Type\n  | top : PPC_form\n  | var : \u2115 \u2192 PPC_form\n  | and : PPC_form \u2192 PPC_form \u2192 PPC_form\n  | impl : PPC_form \u2192 PPC_form \u2192 PPC_form\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"notation (name:=PPC.top) `\u22a4`:80   := PPC_form.top\nprefix `p`:80     := PPC_form.var\ninfix `&`:79      := PPC_form.and    \nnotation (name:=PPC_form.impl) \u03c6 `\u2283`:80 \u03c8 := PPC_form.impl \u03c6 \u03c8 \n")),(0,i.kt)("h3",{id:"sets-of-hypotheses"},"Sets of Hypotheses"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"@[reducible] def Hyp : Type := set(PPC_form)\n\ninstance : has_union PPC_Hyp := infer_instance\ninstance : has_singleton PPC_Form PPC_Hyp := infer_instance\ninstance : has_mem PPC_Form PPC_Hyp := infer_instance\ninstance : has_insert PPC_Form PPC_Hyp := infer_instance\n")),(0,i.kt)("h3",{id:"ppc_derives"},(0,i.kt)("inlineCode",{parentName:"h3"},"PPC_derives")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"inductive PPC_derives : PPC_Hyp \u2192 PPC_Form \u2192 Prop \n  | hyp {\u03a6 : PPC_Hyp} (\u03c6 : PPC_Form) (\u03c6 \u2208 \u03a6)    \n    : PPC_derives \u03a6 \u03c6\n  | truth {\u03a6}                               \n    : PPC_derives \u03a6 \u22a4 \n  | and_intro {\u03a6} {\u03c6 \u03c8 : PPC_Form}    \n    : PPC_derives \u03a6 \u03c6 \u2192 PPC_derives \u03a6 \u03c8 \u2192 PPC_derives \u03a6 (\u03c6 & \u03c8)\n  | and_eliml {\u03a6} {\u03c6 \u03c8 : PPC_Form}    \n    : PPC_derives \u03a6 (\u03c6 & \u03c8) \u2192 PPC_derives \u03a6 \u03c6\n  | and_elimr {\u03a6} {\u03c6 \u03c8 : PPC_Form}    \n    : PPC_derives \u03a6 (\u03c6 & \u03c8) \u2192 PPC_derives \u03a6 \u03c8\n  | impl_intro {\u03a6 : PPC_Hyp} (\u03c6 : PPC_Form) {\u03c8 : PPC_Form}   \n    : PPC_derives (insert \u03c6 \u03a6) \u03c8 \u2192 PPC_derives \u03a6 (\u03c6 \u2283 \u03c8)\n  | impl_elim {\u03a6 : PPC_Hyp} (\u03c6 : PPC_Form) {\u03c8 : PPC_Form} \n    : PPC_derives \u03a6 (\u03c6 \u2283 \u03c8) \u2192 PPC_derives \u03a6 \u03c6 \u2192 PPC_derives \u03a6 \u03c8\n  | weak {\u03a6 \u03a8 : PPC_Hyp} {\u03c6 : PPC_Form}\n        : PPC_derives \u03a6 \u03c6 \u2192 PPC_derives (\u03a6 \u222a \u03a8) \u03c6\nopen PPC_derives\n")),(0,i.kt)("h2",{id:"ppc-is-an-instance-of-has_derives"},"PPC is an instance of ",(0,i.kt)("inlineCode",{parentName:"h2"},"has_derives")),(0,i.kt)("h3",{id:"a-few-lemmas"},"A few lemmas"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"lemma internal1_impl : \u2200 {\u03c6 \u03c8 : PPC_Form}, \n    PPC_derives {\u03c8} \u03c6 \u2192 PPC_derives \u2205 (\u03c8 \u2283 \u03c6) :=\n  begin \n    assume \u03c6 \u03c8 h,\n    apply impl_intro,\n    rw set.is_lawful_singleton.insert_emptyc_eq,\n    exact h,\n  end\nlemma empty_union : \u2200 \u03c6 : PPC_Form, \n    {\u03c6} = \u2205 \u222a PPC_Hyp.has_singleton.singleton \u03c6 :=\n  begin\n    assume \u03c6,\n    symmetry,\n    apply set.empty_union,\n  end\nlemma weak1 : \u2200 (\u03c6 \u03c8 : PPC_Form), \n    PPC_derives \u2205 \u03c8 \u2192 PPC_derives {\u03c6} \u03c8 :=\n  begin \n    assume \u03c6 \u03c8 h,\n    rw empty_union,\n    apply weak,\n    exact h,\n  end\n")),(0,i.kt)("h3",{id:"instance-declaration"},"Instance declaration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"instance PPC_Der : has_derives PPC_Form :=\n  \u27e8 PPC_Hyp , \n    PPC_derives , \n    begin \n      assume \u03c6,\n      apply @hyp {\u03c6} \u03c6,\n      apply set.mem_singleton,\n    end, \n    begin\n      assume \u03c6 \u03c8 \u03b8 h\u03c6\u03c8 h\u03c8\u03b8,\n      have helper : PPC_derives {\u03c6} (\u03c8 \u2283 \u03b8), \n      apply weak1,\n      apply internal1_impl,\n      exact h\u03c8\u03b8,\n      apply impl_elim,\n      exact helper,\n      exact h\u03c6\u03c8,\n    end\n  \u27e9 \n")),(0,i.kt)("h2",{id:"lemmas-about-ppc-deduction"},"Lemmas about PPC deduction"),(0,i.kt)("h3",{id:"lemmas-about-hyp"},"Lemmas about Hyp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"namespace PPC_Hyp_x\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"meta def find_it : tactic unit :=\n    `[ repeat {{left,refl} <|> right}, try{apply set.mem_singleton}  ]\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"lemma insert_is_union_singleton : \u2200 (\u03a6 : PPC_Hyp) (\u03c6 : PPC_Form),\n      insert \u03c6 \u03a6 = \u03a6 \u222a {\u03c6} :=\n  begin\n    assume \u03a6 \u03c6,\n    apply set.ext,\n    assume \u03c8,\n    apply or_comm,\n  end\nlemma Hyp_twoElt_comm : \u2200 (\u03c6 \u03c8 : PPC_Form), \n      insert \u03c6 {\u03c8} = insert \u03c8 (PPC_Hyp.has_singleton.singleton \u03c6) :=\n  begin\n    assume \u03c6 \u03c8,\n    apply set.ext,\n    assume \u03b8,\n    apply or_comm,\n  end\n")),(0,i.kt)("h3",{id:"lemmas-about-ppc_derives"},"Lemmas about ",(0,i.kt)("inlineCode",{parentName:"h3"},"PPC_derives")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"lemma trans_hyp : \u2200 (\u03a6 : PPC_Hyp) (\u03c6 \u03c8: PPC_Form), \n      PPC_derives \u03a6 \u03c6 \u2192 \u03c6 \u22a2 \u03c8 \u2192 PPC_derives \u03a6 \u03c8 :=\n  begin \n    assume \u03a6 \u03c6 \u03c8 h\u03a6\u03c6 h\u03c6\u03c8,\n    have helper : PPC_derives \u03a6 (\u03c6 \u2283 \u03c8),\n    apply impl_intro,\n    rewrite insert_is_union_singleton, \n    rewrite set.union_comm,\n    apply weak,\n    exact h\u03c6\u03c8,\n    apply impl_elim,\n    exact helper,\n    exact h\u03a6\u03c6,\n  end \n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"lemma modus_ponens : \u2200 \u03c6 \u03c8 : PPC_Form, PPC_derives ({\u03c6\u2283\u03c8}\u222a{\u03c6}) \u03c8 :=\n    begin \n    assume \u03c6 \u03c8,\n    apply impl_elim,\n    apply weak,\n    apply PPC_has_derives.PPC_Der.derive_refl,\n    rewrite set.union_comm,\n    apply weak,\n    apply PPC_has_derives.PPC_Der.derive_refl,\n  end \n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"lemma hypo_syll' : \u2200 \u03c6 \u03c8 \u03b8, (\u03c8 \u2283 \u03b8) \u22a2 ((\u03c6 \u2283 \u03c8) \u2283 (\u03c6 \u2283 \u03b8)) :=\n  begin \n    assume \u03c6 \u03c8 \u03b8,\n    apply impl_intro,\n    apply impl_intro,\n    apply impl_elim \u03c8,\n    apply hyp (\u03c8 \u2283 \u03b8), find_it,\n    apply impl_elim \u03c6,\n    apply hyp (\u03c6\u2283\u03c8), find_it,\n    apply hyp \u03c6, find_it,\n  end\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"lemma union_Hyp_and : \u2200 \u03c6 \u03c8 \u03b8 : PPC_Form, \n      PPC_derives ({\u03c6,\u03c8}) \u03b8 \u2192 ((\u03c6&\u03c8) \u22a2 \u03b8) :=\n  begin \n    assume \u03c6 \u03c8 \u03b8 h,\n    apply impl_elim \u03c6,\n    apply impl_elim \u03c8,\n    apply weak1,\n    apply impl_intro \u03c8,\n    rw set.is_lawful_singleton.insert_emptyc_eq,\n    apply impl_intro \u03c6,\n    exact h,\n    apply and_elimr,\n    apply PPC_has_derives.PPC_Der.derive_refl,\n    apply and_eliml,\n    apply PPC_has_derives.PPC_Der.derive_refl,\n  end \n\nlemma and_Hyp_union : \u2200 \u03c6 \u03c8 \u03b8 : PPC_Form, \n      ((\u03c6&\u03c8) \u22a2 \u03b8) \u2192 PPC_derives ({\u03c8,\u03c6}) \u03b8 :=\n  begin\n        assume \u03c6 \u03c8 \u03b8 h,\n        apply impl_elim,\n        apply weak,\n        apply weak1,\n        apply internal1_impl,\n        exact h,\n        apply and_intro,\n        rw Hyp_twoElt_comm,\n        apply weak,\n        apply PPC_has_derives.PPC_Der.derive_refl,\n        apply PPC_derives.weak,\n        apply PPC_has_derives.PPC_Der.derive_refl,\n  end\n")))}d.isMDXComponent=!0}}]);