"use strict";(self.webpackChunklean_catlogic=self.webpackChunklean_catlogic||[]).push([[767],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function P(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),s=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return i.createElement(l.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},_=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=P(e,["components","mdxType","originalType","parentName"]),d=s(t),_=r,u=d["".concat(l,".").concat(_)]||d[_]||p[_]||a;return t?i.createElement(u,o(o({ref:n},c),{},{components:t})):i.createElement(u,o({ref:n},c))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=_;var P={};for(var l in n)hasOwnProperty.call(n,l)&&(P[l]=n[l]);P.originalType=e,P[d]="string"==typeof e?e:r,o[1]=P;for(var s=2;s<a;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}_.displayName="MDXCreateElement"},9571:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>P,toc:()=>s});var i=t(7462),r=(t(7294),t(3905));const a={},o="Positive Propositional Calculus",P={unversionedId:"deduction/examples/PPC",id:"deduction/examples/PPC",title:"Positive Propositional Calculus",description:"PPC Definition",source:"@site/docs/deduction/examples/PPC.md",sourceDirName:"deduction/examples",slug:"/deduction/examples/PPC",permalink:"/docs/deduction/examples/PPC",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Monadic Modality",permalink:"/docs/deduction/deduction_monadic"},next:{title:"PPC + Monadic Modality",permalink:"/docs/deduction/examples/MPPC"}},l={},s=[{value:"PPC Definition",id:"ppc-definition",level:2},{value:"<code>PPC_derives</code>",id:"ppc_derives",level:3},{value:"PPC is an instance of <code>has_struct_derives</code>",id:"ppc-is-an-instance-of-has_struct_derives",level:2},{value:"Hypotheses",id:"hypotheses",level:3},{value:"Instance declaration",id:"instance-declaration",level:3},{value:"Cartesian Structure",id:"cartesian-structure",level:2}],c={toc:s};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"positive-propositional-calculus"},"Positive Propositional Calculus"),(0,r.kt)("h2",{id:"ppc-definition"},"PPC Definition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"namespace PPC_defn\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"inductive PPC_form : Type\n  | top : PPC_form\n  | var : \u2115 \u2192 PPC_form\n  | and : PPC_form \u2192 PPC_form \u2192 PPC_form\n  | impl : PPC_form \u2192 PPC_form \u2192 PPC_form\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"@[reducible] def Hyp : Type := set(PPC_form)\ninstance : has_union PPC_Hyp := infer_instance\ninstance : has_mem PPC_Form PPC_Hyp := infer_instance\ninstance : has_insert PPC_Form PPC_Hyp := infer_instance\ninstance : has_emptyc PPC_Hyp := infer_instance\n")),(0,r.kt)("h3",{id:"ppc_derives"},(0,r.kt)("inlineCode",{parentName:"h3"},"PPC_derives")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"inductive PPC_derives : PPC_Hyp \u2192 PPC_Form \u2192 Prop \n| hyp {\u03a6 : PPC_Hyp} {\u03c6 : PPC_Form}  \n    : (\u03c6 \u2208 \u03a6) \u2192  PPC_derives \u03a6 \u03c6\n| truth {\u03a6}                               \n    : PPC_derives \u03a6 PPC_Form.top\n| and_intro {\u03a6} {\u03c6 \u03c8 : PPC_Form}    \n    : PPC_derives \u03a6 \u03c6 \u2192 PPC_derives \u03a6 \u03c8 \u2192 PPC_derives \u03a6 (PPC_Form.and \u03c6 \u03c8)\n| and_eliml {\u03a6} {\u03c6 \u03c8 : PPC_Form}    \n    : PPC_derives \u03a6 (PPC_Form.and \u03c6 \u03c8) \u2192 PPC_derives \u03a6 \u03c6\n| and_elimr {\u03a6} {\u03c6 \u03c8 : PPC_Form}    \n    : PPC_derives \u03a6 (PPC_Form.and \u03c6 \u03c8) \u2192 PPC_derives \u03a6 \u03c8\n| impl_intro {\u03a6 : PPC_Hyp} (\u03c6 : PPC_Form) {\u03c8 : PPC_Form}   \n    : PPC_derives (insert \u03c6 \u03a6) \u03c8 \u2192 PPC_derives \u03a6 (PPC_Form.impl \u03c6 \u03c8)\n| impl_elim {\u03a6 : PPC_Hyp} (\u03c6 : PPC_Form) {\u03c8 : PPC_Form} \n    : PPC_derives \u03a6 (PPC_Form.impl \u03c6 \u03c8) \u2192 PPC_derives \u03a6 \u03c6 \u2192 PPC_derives \u03a6 \u03c8\n| weak {\u03a6 \u03a8 : PPC_Hyp} {\u03c6 : PPC_Form}\n    : PPC_derives \u03a6 \u03c6 \u2192 PPC_derives (\u03a6 \u222a \u03a8) \u03c6\nopen PPC_derives\n")),(0,r.kt)("h2",{id:"ppc-is-an-instance-of-has_struct_derives"},"PPC is an instance of ",(0,r.kt)("inlineCode",{parentName:"h2"},"has_struct_derives")),(0,r.kt)("h3",{id:"hypotheses"},"Hypotheses"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"instance PPC_hasHyp : has_Hyp PPC_Form :=\n  { Hyp := PPC_Hyp }\n\ninstance PPC_singleton : has_singleton PPC_Form PPC_Hyp :=\n  deduction_basic.singleHyp\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"@[simp] \nlemma same_singles : \u2200 \u03c6 : PPC_Form, \n    PPC_has_derives.PPC_singleton.singleton \u03c6 = set.has_singleton.singleton \u03c6 :=\n  begin \n    assume \u03c6,\n    dsimp[PPC_has_derives.PPC_singleton,deduction_basic.singleHyp],\n    rw set.is_lawful_singleton.insert_emptyc_eq,\n  end\n\nlemma single_union {\u03a6 : PPC_Hyp} {\u03c6 : PPC_Form}\n    : insert \u03c6 \u03a6 = {\u03c6} \u222a \u03a6 := by simp\n")),(0,r.kt)("h3",{id:"instance-declaration"},"Instance declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"instance PPC_Der : has_struct_derives PPC_Form :=\n{\n  derives := PPC_derives,\n  derive_Trans := \n    begin\n      assume \u03a6 \u03c8 \u03b8 h\u03c6\u03c8 h\u03c8\u03b8,\n      have helper : PPC_derives \u03a6 (PPC_Form.impl \u03c8 \u03b8),\n        apply impl_intro,\n        rw single_union,\n        apply weak,\n        exact h\u03c8\u03b8,\n      apply impl_elim \u03c8,\n      exact helper,\n      exact h\u03c6\u03c8,\n    end,\n  inInsert := set.mem_insert,\n  hyp := @hyp,\n  weak1 := \n    begin\n      assume \u03a6 \u03c6 \u03c8 h,\n      rw single_union,\n      rw set.union_comm,\n      apply weak,\n      exact h,\n    end,\n}\n")),(0,r.kt)("h2",{id:"cartesian-structure"},"Cartesian Structure"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="deduction/PPC_natDeduct.lean"',title:'"deduction/PPC_natDeduct.lean"'},"instance PPC_top : deduction_cart.has_ltop PPC_Form :=\n{\n  top := PPC_Form.top,\n  truth := @truth,\n}\ninstance PPC_and : deduction_cart.has_and PPC_Form :=\n{\n  and := PPC_Form.and,\n  and_intro := @and_intro,\n  and_eliml := @and_eliml,\n  and_elimr := @and_elimr,\n\n}\ninstance PPC_impl : deduction_cart.has_impl PPC_Form :=\n{\n  impl := PPC_Form.impl,\n  impl_intro := @impl_intro,\n  impl_elim := @impl_elim,\n}\n")))}d.isMDXComponent=!0}}]);