"use strict";(self.webpackChunklean_catlogic=self.webpackChunklean_catlogic||[]).push([[337],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>P});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=a.createContext({}),s=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(o.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=s(t),c=l,P=d["".concat(o,".").concat(c)]||d[c]||u[c]||i;return t?a.createElement(P,r(r({ref:n},m),{},{components:t})):a.createElement(P,r({ref:n},m))}));function P(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=c;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p[d]="string"==typeof e?e:l,r[1]=p;for(var s=2;s<i;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7156:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=t(7462),l=(t(7294),t(3905));const i={},r="Positive Propositional Calculus",p={unversionedId:"syntax/PPC",id:"syntax/PPC",title:"Positive Propositional Calculus",description:"The Language",source:"@site/docs/syntax/PPC.md",sourceDirName:"syntax",slug:"/syntax/PPC",permalink:"/docs/syntax/PPC",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Welcome!",permalink:"/docs/welcome"},next:{title:"Intuitionistic Propositional Logic",permalink:"/docs/syntax/IPL"}},o={},s=[{value:"The Language",id:"the-language",level:2},{value:"The Proof Calculus",id:"the-proof-calculus",level:2},{value:"Sets of Hypotheses",id:"sets-of-hypotheses",level:3},{value:"Defining Deduction",id:"defining-deduction",level:3},{value:"Lemmas about Deduction",id:"lemmas-about-deduction",level:2},{value:"Weakening",id:"weakening",level:3},{value:"Reflexivity and Transitivity of Deduction",id:"reflexivity-and-transitivity-of-deduction",level:3},{value:"Modus Ponens and Hypothetical Syllogism",id:"modus-ponens-and-hypothetical-syllogism",level:3},{value:"Internalizing \u22a2  and \u222a",id:"internalizing---and-",level:3}],m={toc:s};function d(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"positive-propositional-calculus"},"Positive Propositional Calculus"),(0,l.kt)("h2",{id:"the-language"},"The Language"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="languages/PPC.lean"',title:'"languages/PPC.lean"'},"inductive PPC_form : Type\n  | top : PPC_form\n  | var : \u2115 \u2192 PPC_form\n  | and : PPC_form \u2192 PPC_form \u2192 PPC_form\n  | impl : PPC_form \u2192 PPC_form \u2192 PPC_form\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="languages/PPC.lean"',title:'"languages/PPC.lean"'},"notation (name:=PPC.top) `\u22a4`:80   := PPC_form.top\nprefix `p`:80     := PPC_form.var\ninfix `&`:79      := PPC_form.and    \nnotation (name:=PPC_form.impl) \u03c6 `\u2283`:80 \u03c8 := PPC_form.impl \u03c6 \u03c8 \n\n")),(0,l.kt)("h2",{id:"the-proof-calculus"},"The Proof Calculus"),(0,l.kt)("h3",{id:"sets-of-hypotheses"},"Sets of Hypotheses"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="proof/PPC_natDeduct.lean"',title:'"proof/PPC_natDeduct.lean"'},"@[reducible] def Hyp : Type := set(PPC_form)\n\ninstance : has_union Hyp :=\n{\n    union := \u03bb X Y, { \u03c6 | \u03c6\u2208X \u2228 \u03c6\u2208Y}\n}\ninstance : has_singleton PPC_form Hyp := {singleton := \u03bb \u03c6, {\u03c6}}\ninstance : has_mem PPC_form Hyp := { mem := \u03bb \u03c6 \u03a6, \u03c6 \u2208 \u03a6}\n\ndef Hinsert (\u03a6 : Hyp) (\u03c6 : PPC_form) : Hyp := \u03a6 \u222a {\u03c6}\nnotation (name:=Hinsert) \u03a6 `U` \u03c6 := Hinsert \u03a6 \u03c6\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="proof/PPC_natDeduct.lean"',title:'"proof/PPC_natDeduct.lean"'},"lemma in_single : \u2200 \u03c6 : PPC_form , \u03c6 \u2208 Hyp.has_singleton.singleton \u03c6 :=\nbegin\n    assume \u03c6,\n    dsimp[Hyp.has_singleton,set.has_singleton], refl,\nend\nlemma in_U_\u03c6 : \u2200 (\u03a6 : Hyp) (\u03c6 : PPC_form), \u03c6 \u2208 (\u03a6 U \u03c6) :=\nbegin\n    assume \u03a6 \u03c6,\n    right,\n    dsimp[Hyp.has_singleton,set.has_singleton],\n    refl,\nend\nlemma in_U_\u03a6 : \u2200 (\u03a6 : Hyp) (\u03c6 \u03c8 : PPC_form), \u03c8\u2208\u03a6 \u2192 (\u03c8 \u2208 (\u03a6 U \u03c6)) :=\nbegin\n    assume \u03a6 \u03c6 \u03c8 h,\n    left,\n    exact h,\nend\n")),(0,l.kt)("h3",{id:"defining-deduction"},"Defining Deduction"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="proof/PPC_natDeduct.lean"',title:'"proof/PPC_natDeduct.lean"'},"inductive derives : Hyp \u2192 PPC_form \u2192 Prop\n  | hyp {\u03a6} {\u03c6 : PPC_form} (\u03c6 \u2208 \u03a6)    : derives \u03a6 \u03c6\n  | truth {\u03a6}                         : derives \u03a6 \u22a4\n  | and_intro {\u03a6} {\u03c6 \u03c8 : PPC_form}\n      : derives \u03a6 \u03c6 \u2192 derives \u03a6 \u03c8 \u2192 derives \u03a6 (\u03c6 & \u03c8)\n  | and_eliml {\u03a6} {\u03c6 \u03c8 : PPC_form}\n      : derives \u03a6 (\u03c6 & \u03c8) \u2192 derives \u03a6 \u03c6\n  | and_elimr {\u03a6} {\u03c6 \u03c8 : PPC_form}\n      : derives \u03a6 (\u03c6 & \u03c8) \u2192 derives \u03a6 \u03c8\n  | impl_intro {\u03a6 : Hyp} {\u03c6 \u03c8 : PPC_form}\n      : derives (\u03a6 U \u03c6) \u03c8 \u2192 derives \u03a6 (\u03c6 \u2283 \u03c8)\n  | impl_elim {\u03a6 : Hyp} {\u03c6 \u03c8 : PPC_form}\n      : derives \u03a6 (\u03c6 \u2283 \u03c8) \u2192 derives \u03a6 \u03c6 \u2192 derives \u03a6 \u03c8\n  | weak {\u03a6 \u03a8 : Hyp} {\u03c6 : PPC_form}\n      : derives \u03a6 \u03c6 \u2192 derives (\u03a6 \u222a \u03a8) \u03c6\n\ninfix `\u22a2`:80 := \u03bb \u03c6 \u03c8, derives {\u03c6} \u03c8\n")),(0,l.kt)("h2",{id:"lemmas-about-deduction"},"Lemmas about Deduction"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="proof/PPC_natDeduct.lean"',title:'"proof/PPC_natDeduct.lean"'},"namespace derives_x\n")),(0,l.kt)("h3",{id:"weakening"},"Weakening"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="proof/PPC_natDeduct.lean"',title:'"proof/PPC_natDeduct.lean"'},"lemma weaksucc : \u2200 (\u03a6 : Hyp) (\u03c6 \u03c8 : PPC_form), derives \u03a6 \u03c8 \u2192 derives (\u03a6 U \u03c6) \u03c8 :=\nbegin\n    assume \u03a6 \u03c6 \u03c8 h,\n    apply weak,\n    exact h,\nend\nlemma weak1 : \u2200 (\u03c6 \u03c8 : PPC_form), derives \u2205 \u03c8 \u2192 \u03c6 \u22a2 \u03c8 :=\nbegin\n    assume \u03c6 \u03c8 h,\n    rewrite\u2190 Hyp_x.singleton_insert,\n    apply weak,\n    exact h,\nend\n")),(0,l.kt)("h3",{id:"reflexivity-and-transitivity-of-deduction"},"Reflexivity and Transitivity of Deduction"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="proof/PPC_natDeduct.lean"',title:'"proof/PPC_natDeduct.lean"'},"lemma refl : \u2200 \u03c6 : PPC_form, \u03c6 \u22a2 \u03c6 :=\nbegin\n    intro \u03c6,\n    apply @hyp {\u03c6} \u03c6,\n    apply Hyp_x.in_single, -- \u03c6 \u2208 {\u03c6}\nend\nlemma trans : \u2200 \u03c6 \u03c8 \u03b8 : PPC_form, \u03c6 \u22a2 \u03c8 \u2192 \u03c8 \u22a2 \u03b8 \u2192 \u03c6 \u22a2 \u03b8 :=\nbegin\n    assume \u03c6 \u03c8 \u03b8 h\u03c6\u03c8 h\u03c8\u03b8,\n    have helper : derives {\u03c6} (\u03c8 \u2283 \u03b8),\n    apply weak1,\n    apply internal1_impl,\n    exact h\u03c8\u03b8,\n    apply impl_elim,\n    exact helper,\n    exact h\u03c6\u03c8,\nend\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="proof/PPC_natDeduct.lean"',title:'"proof/PPC_natDeduct.lean"'},"lemma trans_hyp : \u2200 (\u03a6 : Hyp) (\u03c6 \u03c8: PPC_form), derives \u03a6 \u03c6 \u2192 \u03c6 \u22a2 \u03c8 \u2192 derives \u03a6 \u03c8 :=\nbegin\n    assume \u03a6 \u03c6 \u03c8 h\u03a6\u03c6 h\u03c6\u03c8,\n    have helper : derives \u03a6 (\u03c6 \u2283 \u03c8),\n    apply impl_intro,\n    dsimp[(U)],\n    rewrite Hyp_x.union_comm,\n    apply weak,\n    exact h\u03c6\u03c8,\n    apply impl_elim,\n    exact helper,\n    exact h\u03a6\u03c6,\nend\n")),(0,l.kt)("h3",{id:"modus-ponens-and-hypothetical-syllogism"},"Modus Ponens and Hypothetical Syllogism"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="proof/PPC_natDeduct.lean"',title:'"proof/PPC_natDeduct.lean"'},"lemma modus_ponens : \u2200 \u03c6 \u03c8 : PPC_form, derives ({\u03c6\u2283\u03c8}\u222a{\u03c6}) \u03c8 :=\nbegin\n    assume \u03c6 \u03c8,\n    apply impl_elim,\n    apply weak,\n    apply derives_x.refl,\n    rewrite Hyp_x.union_comm,\n    apply weak,\n    apply derives_x.refl,\nend\n\n-- lemma hypo_syll : \u2200 \u03c6 \u03c8 \u03b8, (\u03c6 \u2283 \u03c8) \u22a2 ((\u03c8 \u2283 \u03b8) \u2283 (\u03c6 \u2283 \u03b8)) := sorry\n\nlemma hypo_syll' : \u2200 \u03c6 \u03c8 \u03b8, (\u03c8 \u2283 \u03b8) \u22a2 ((\u03c6 \u2283 \u03c8) \u2283 (\u03c6 \u2283 \u03b8)) :=\nbegin\n    assume \u03c6 \u03c8 \u03b8,\n    apply impl_intro,\n    apply impl_intro,\n    apply impl_elim,\n    apply @hyp ({\u03c8\u2283\u03b8} U \u03c6\u2283\u03c8 U \u03c6) (\u03c8 \u2283 \u03b8) (\u03c8 \u2283 \u03b8),\n    -- \u03c8\u2283\u03b8 \u2208 {\u03c8\u2283\u03b8 , \u03c6\u2283\u03c8 , \u03c6}\n    apply Hyp_x.in_U_\u03a6, apply Hyp_x.in_U_\u03a6, rewrite\u2190 Hyp_x.singleton_insert, apply Hyp_x.in_U_\u03c6,\n    apply impl_elim,\n    apply weak,\n    apply @hyp ({\u03c8\u2283\u03b8} U \u03c6\u2283\u03c8) (\u03c6\u2283\u03c8) (\u03c6\u2283\u03c8),\n    apply Hyp_x.in_U_\u03c6,\n    apply @hyp ({\u03c8\u2283\u03b8} U \u03c6\u2283\u03c8 U \u03c6) (\u03c6) (\u03c6),\n    apply Hyp_x.in_U_\u03c6,\nend\n")),(0,l.kt)("h3",{id:"internalizing---and-"},"Internalizing \u22a2  and \u222a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="proof/PPC_natDeduct.lean"',title:'"proof/PPC_natDeduct.lean"'},"lemma internal1_impl : \u2200 {\u03c6 \u03c8 : PPC_form}, \u03c8 \u22a2 \u03c6 \u2192 derives \u2205 (\u03c8 \u2283 \u03c6) :=\nbegin\n    assume \u03c6 \u03c8 h,\n    apply impl_intro,\n    rewrite Hyp_x.singleton_insert,\n    exact h,\nend\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="proof/PPC_natDeduct.lean"',title:'"proof/PPC_natDeduct.lean"'},"lemma union_Hyp_and : \u2200 \u03c6 \u03c8 \u03b8 : PPC_form, derives ({\u03c6}\u222a{\u03c8}) \u03b8 \u2192 ((\u03c6&\u03c8) \u22a2 \u03b8) :=\nbegin\n    assume \u03c6 \u03c8 \u03b8 h,\n    apply impl_elim,\n    apply impl_elim,\n    apply weak1,\n    apply impl_intro,\n    rewrite Hyp_x.singleton_insert,\n    apply impl_intro,\n    exact h,\n    apply and_eliml,\n    apply derives_x.refl,\n    apply and_elimr,\n    apply derives_x.refl,\nend\n\nlemma and_Hyp_union : \u2200 \u03c6 \u03c8 \u03b8 : PPC_form, ((\u03c6&\u03c8) \u22a2 \u03b8) \u2192 derives ({\u03c6}\u222a{\u03c8}) \u03b8 :=\nbegin\n    assume \u03c6 \u03c8 \u03b8 h,\n    apply impl_elim,\n    apply weak,\n    apply weak1,\n    apply internal1_impl,\n    exact h,\n    apply and_intro,\n    apply weak,\n    apply derives_x.refl,\n    rewrite Hyp_x.union_comm,\n    apply derives.weak,\n    apply derives_x.refl,\nend\n")))}d.isMDXComponent=!0}}]);