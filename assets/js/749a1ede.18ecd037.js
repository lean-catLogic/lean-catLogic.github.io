"use strict";(self.webpackChunklean_catlogic=self.webpackChunklean_catlogic||[]).push([[806],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>g});var a=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var c=a.createContext({}),s=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},u=function(t){var e=s(t.components);return a.createElement(c.Provider,{value:e},t.children)},m="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,r=t.originalType,c=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),m=s(n),d=i,g=m["".concat(c,".").concat(d)]||m[d]||p[d]||r;return n?a.createElement(g,l(l({ref:e},u),{},{components:n})):a.createElement(g,l({ref:e},u))}));function g(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=t,o[m]="string"==typeof t?t:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3746:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={},l="synCat Tactics",o={unversionedId:"semantics/synCat_tactics",id:"semantics/synCat_tactics",title:"synCat Tactics",description:"LiftT Basic Usage",source:"@site/docs/semantics/synCat_tactics.md",sourceDirName:"semantics",slug:"/semantics/synCat_tactics",permalink:"/docs/semantics/synCat_tactics",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Syntactic Categories",permalink:"/docs/semantics/synCat"},next:{title:"Constructions on Syntactic Categories",permalink:"/docs/semantics/synCat_structure"}},c={},s=[{value:"<code>LiftT</code> Basic Usage",id:"liftt-basic-usage",level:2},{value:"Outline",id:"outline",level:3},{value:"Introducing variables, quotient induction, and <code>syn_hom</code>",id:"introducing-variables-quotient-induction-and-syn_hom",level:3},{value:"<code>mkCount</code>",id:"mkcount",level:4},{value:"Repeat-assume-induct",id:"repeat-assume-induct",level:4},{value:"Repeat-assume-replace",id:"repeat-assume-replace",level:4},{value:"Applying the tactic and eliminating other goals",id:"applying-the-tactic-and-eliminating-other-goals",level:3},{value:"Proving coherence",id:"proving-coherence",level:3},{value:"Simplified <code>LiftT</code>",id:"simplified-liftt",level:3},{value:"Debugging Usage",id:"debugging-usage",level:2}],u={toc:s};function m(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"syncat-tactics"},"synCat Tactics"),(0,i.kt)("h2",{id:"liftt-basic-usage"},(0,i.kt)("inlineCode",{parentName:"h2"},"LiftT")," Basic Usage"),(0,i.kt)("h3",{id:"outline"},"Outline"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Introduce variables, induct, reduce to derivation problem"),(0,i.kt)("li",{parentName:"ol"},"Apply the tactic"),(0,i.kt)("li",{parentName:"ol"},"Eliminate other goals"),(0,i.kt)("li",{parentName:"ol"},"Prove coherence")),(0,i.kt)("h3",{id:"introducing-variables-quotient-induction-and-syn_hom"},"Introducing variables, quotient induction, and ",(0,i.kt)("inlineCode",{parentName:"h3"},"syn_hom")),(0,i.kt)("h4",{id:"mkcount"},(0,i.kt)("inlineCode",{parentName:"h4"},"mkCount")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="semantics/syntacticCat.lean"',title:'"semantics/syntacticCat.lean"'},"  meta def incrLeft : nat \xd7 nat \u2192 tactic(nat \xd7 nat)\n    | (o,m) := return (succ o, m)\n  meta def incrRight : nat \xd7 nat \u2192 tactic(nat \xd7 nat)\n    | (o,m) := return (o, succ m)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="semantics/syntacticCat.lean"',title:'"semantics/syntacticCat.lean"'},"  meta def mkCount : expr \u2192  tactic (nat \xd7 nat)\n  | `( \u03a0 {_ : _ _eq}, %%newGoal) := mkCount newGoal >>= incrLeft\n  | `( \u03a0 {_ : _ \u27f6 _}, %%newGoal) := mkCount newGoal >>= incrRight\n  | _ := return (0,0)\n")),(0,i.kt)("h4",{id:"repeat-assume-induct"},"Repeat-assume-induct"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../generalTactics#repeat-assume-then-induct"},"Documentation")),(0,i.kt)("h4",{id:"repeat-assume-replace"},"Repeat-assume-replace"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../generalTactics#repeat-assume-replace"},"Documentation")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="semantics/syntacticCat.lean"',title:'"semantics/syntacticCat.lean"'},"syn_hom [Der : has_struct_derives Form] : \n      \u2200 {\u03c6 \u03c8 : Form}, (\u03c6 \u22a2 \u03c8) \u2192 (syn_obj \u03c6 \u27f6 syn_obj \u03c8) \n")),(0,i.kt)("h3",{id:"applying-the-tactic-and-eliminating-other-goals"},"Applying the tactic and eliminating other goals"),(0,i.kt)("h3",{id:"proving-coherence"},"Proving coherence"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../categoryTheory/thin#by_thin-tactic"},"Documentation")),(0,i.kt)("h3",{id:"simplified-liftt"},"Simplified ",(0,i.kt)("inlineCode",{parentName:"h3"},"LiftT")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lean",metastring:'title="semantics/syntacticCat.lean"',title:'"semantics/syntacticCat.lean"'},"meta def LiftT (T : tactic unit) : tactic unit :=\n  do\n    -- Count & print how many objects and morphisms to assume\n    (numobjs,nummor) \u2190 mkCount,\n\n    /- Assume objects and morphisms, \n      - use induction to get that every object is of the form \u2983\u03c6\u2984 for some \u03c6:Form \n      - use syn_hom_inv to turn every assumed morphism into a derivation -/\n    repeat_assume_induct (gen_nameList `\u03c6_ numobjs),\n    repeat_assume_replace `synCat.syn_hom_inv (gen_nameList `f_ nummor),\n\n    -- Turn the synCat hom goal to a derivation goal\n    applyc `synCat.syn_hom,\n\n    -- Apply the input tactic\n    T,\n    \n    -- Eliminate other goals (first stage of cleanup)\n    iterate (\n      (applyc `deduction_basic.derive_refl)\n      <|> assumption\n    ),\n  \n    -- Prove the coherences\n    thin_cat.by_thin\n")),(0,i.kt)("h2",{id:"debugging-usage"},"Debugging Usage"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Introduce variables, induct, reduce to derivation problem"),(0,i.kt)("li",{parentName:"ol"},"Apply the tactic"),(0,i.kt)("li",{parentName:"ol"},"Eliminate other goals"),(0,i.kt)("li",{parentName:"ol"},"Prove coherence")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Invocation"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Tasks Performed"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"LiftT")),(0,i.kt)("td",{parentName:"tr",align:null},"Regular use"),(0,i.kt)("td",{parentName:"tr",align:null},"1,2,3,4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"LiftT?")),(0,i.kt)("td",{parentName:"tr",align:null},"Just initialize"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"LiftT?!")),(0,i.kt)("td",{parentName:"tr",align:null},"Tactic application stage"),(0,i.kt)("td",{parentName:"tr",align:null},"1,2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"LiftT?!!")),(0,i.kt)("td",{parentName:"tr",align:null},"Elimination of other goals"),(0,i.kt)("td",{parentName:"tr",align:null},"1,2,3")))))}m.isMDXComponent=!0}}]);